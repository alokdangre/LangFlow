// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  plan          Plan      @default(FREE)
  stripeCustomerId String?
  subscriptionId String?
  subscriptionStatus String?
  currentPeriodEnd DateTime?
  timezone      String?   @default("UTC")
  language      String?   @default("en")
  theme         String?   @default("light")
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  workflows        Workflow[]
  executions       WorkflowExecution[]
  apiKeys          ApiKey[]
  usage            Usage[]
  notifications    Notification[]
  credentials      Credential[]
  auditLogs        AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  nodes       Json
  edges       Json
  settings    Json?
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(false)
  tags        String[]
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions  WorkflowExecution[]
  versions    WorkflowVersion[]
}

model WorkflowVersion {
  id         String   @id @default(cuid())
  workflowId String
  version    Int
  nodes      Json
  edges      Json
  settings   Json?
  createdAt  DateTime @default(now())

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, version])
}

model WorkflowExecution {
  id          String            @id @default(cuid())
  workflowId  String
  userId      String
  status      ExecutionStatus   @default(PENDING)
  startedAt   DateTime          @default(now())
  finishedAt  DateTime?
  duration    Int?              // in milliseconds
  input       Json?
  output      Json?
  error       String?
  nodeResults Json?             // Results for each node
  metadata    Json?

  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  userId      String
  permissions Json?
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usage {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime @default(now())
  executions  Int      @default(0)
  apiCalls    Int      @default(0)
  storage     Int      @default(0) // in bytes
  bandwidth   Int      @default(0) // in bytes

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  nodes       Json
  edges       Json
  settings    Json?
  tags        String[]
  isPublic    Boolean  @default(true)
  downloads   Int      @default(0)
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}


enum Plan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}


model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
}

model AuditLog {
  id          String    @id @default(cuid())
  userId      String
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Integration {
  id          String   @id @default(cuid())
  name        String
  type        String
  category    String
  description String?
  icon        String?
  config      Json
  isActive    Boolean  @default(true)
  version     String   @default("1.0.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([category])
}

model Credential {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String
  data        Json     // Encrypted credential data
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  WORKFLOW_EXECUTION
  WORKSPACE_INVITATION
  SYSTEM_UPDATE
}
